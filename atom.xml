<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zoctan&#39;s Blog</title>
  <icon>https://zoctan.github.io/img/logo.png</icon>
  <subtitle>Nice To See You!</subtitle>
  <link href="https://zoctan.github.io/atom.xml" rel="self"/>
  
  <link href="https://zoctan.github.io/"/>
  <updated>2022-10-25T14:51:29.978Z</updated>
  <id>https://zoctan.github.io/</id>
  
  <author>
    <name>Zoctan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AI 绘画</title>
    <link href="https://zoctan.github.io/2022/10/25/zh/programing/ai/painting/"/>
    <id>https://zoctan.github.io/2022/10/25/zh/programing/ai/painting/</id>
    <published>2022-10-25T14:51:29.978Z</published>
    <updated>2022-10-25T14:51:29.978Z</updated>
    
    
    <summary type="html">&lt;p&gt;AI 作图的方向不错，目前想到图片&amp;#x2F;音乐这类都是无国界的，全世界都能传播。&lt;/p&gt;
&lt;p&gt;数据来源：&lt;br&gt;商业画手（版权问题，不过只要数据量足够多，很难去人工识别哪些部分是来源商业的）&lt;br&gt;CC免费（质量不高，可以考虑）&lt;/p&gt;</summary>
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="programing" scheme="https://zoctan.github.io/categories/zh/programing/"/>
    
    <category term="ai" scheme="https://zoctan.github.io/categories/zh/programing/ai/"/>
    
    
    <category term="ai" scheme="https://zoctan.github.io/tags/ai/"/>
    
  </entry>
  
  <entry>
    <title>English Basis</title>
    <link href="https://zoctan.github.io/2022/10/25/zh/english/basis/"/>
    <id>https://zoctan.github.io/2022/10/25/zh/english/basis/</id>
    <published>2022-10-25T02:12:02.000Z</published>
    <updated>2022-10-25T14:51:29.978Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;单词语法&quot;&gt;&lt;a href=&quot;#单词语法&quot; class=&quot;headerlink&quot; title=&quot;单词语法&quot;&gt;&lt;/a&gt;单词语法&lt;/h1&gt;&lt;h2 id=&quot;名词所有格&quot;&gt;&lt;a href=&quot;#名词所有格&quot; class=&quot;headerlink&quot; title=&quot;名词所有格&quot;&gt;&lt;/a&gt;名词所有格&lt;/h2&gt;&lt;h3 id=&quot;有生命名词的所有格&quot;&gt;&lt;a href=&quot;#有生命名词的所有格&quot; class=&quot;headerlink&quot; title=&quot;有生命名词的所有格&quot;&gt;&lt;/a&gt;有生命名词的所有格&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一般加 ‘s&lt;br&gt;my brother’s bag &amp;#x2F; the boy’s mother&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以 -s 和 -es 结尾的复数名词，右上角加 ‘&lt;br&gt;the workers’ club &amp;#x2F; the birds’ song&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;复合名词后加 ‘s&lt;br&gt;her son-in-law’s photo&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;两人共有一样，只在后一名词加 ‘s ; 如果不共有，两个名词都加&lt;br&gt;Jane and Mary’s father &amp;#x2F; Jane’s and Tom’s father&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="english" scheme="https://zoctan.github.io/categories/zh/english/"/>
    
    <category term="basis" scheme="https://zoctan.github.io/categories/zh/english/basis/"/>
    
    
  </entry>
  
  <entry>
    <title>IELTS</title>
    <link href="https://zoctan.github.io/2022/10/25/zh/english/ielts/ielts/"/>
    <id>https://zoctan.github.io/2022/10/25/zh/english/ielts/ielts/</id>
    <published>2022-10-25T02:12:02.000Z</published>
    <updated>2022-10-25T14:51:29.978Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="english" scheme="https://zoctan.github.io/categories/zh/english/"/>
    
    <category term="ielts" scheme="https://zoctan.github.io/categories/zh/english/ielts/"/>
    
    
  </entry>
  
  <entry>
    <title>V2ray + Cloudflare 拯救被墙 VPS IP</title>
    <link href="https://zoctan.github.io/2022/10/12/zh/others/v2ray_cloudfare_save_ban_ip/"/>
    <id>https://zoctan.github.io/2022/10/12/zh/others/v2ray_cloudfare_save_ban_ip/</id>
    <published>2022-10-11T16:00:00.000Z</published>
    <updated>2022-10-25T14:51:29.978Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;前记&quot;&gt;&lt;a href=&quot;#前记&quot; class=&quot;headerlink&quot; title=&quot;前记&quot;&gt;&lt;/a&gt;前记&lt;/h1&gt;&lt;p&gt;前几年买了&lt;a href=&quot;https://bandwagonhost.com/&quot;&gt;搬瓦工&lt;/a&gt;的一台最便宜的 VPS，大概一年120元，期间试过 Shadowsocks，V2ray，目前稳定在 V2ray + Cloudflare。&lt;/p&gt;
&lt;p&gt;VPS IP 早几年就被 the great wall 封了，所以才用了 V2ray + Cloudflare 方案，不定时还要更新 CDN 的 IP，不然也会有被屏蔽的麻烦。&lt;/p&gt;
&lt;p&gt;搬瓦工的官网需要翻墙才能上，安装完系统也要翻墙，所以先找个免费的限时 VPN 挂着。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wulabing/V2Ray_ws-tls_bash_onekey&quot;&gt;VPS 安装 V2ray 脚本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/badafans/better-cloudflare-ip&quot;&gt;Cloudflare CDN IP 测速脚本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/XIU2/CloudflareSpeedTest&quot;&gt;Cloudflare CDN IP 测速脚本2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/2dust/v2rayN&quot;&gt;Windows 客户端&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/2dust/v2rayNG&quot;&gt;Android 客户端&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="others" scheme="https://zoctan.github.io/categories/zh/others/"/>
    
    
  </entry>
  
  <entry>
    <title>BT</title>
    <link href="https://zoctan.github.io/2022/10/10/zh/hardware/nas/bt/"/>
    <id>https://zoctan.github.io/2022/10/10/zh/hardware/nas/bt/</id>
    <published>2022-10-09T16:00:00.000Z</published>
    <updated>2022-10-25T14:51:29.978Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;BT-站点&quot;&gt;&lt;a href=&quot;#BT-站点&quot; class=&quot;headerlink&quot; title=&quot;BT 站点&quot;&gt;&lt;/a&gt;BT 站点&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://thepiratebay.org/index.html&quot;&gt;the pirate bay&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://proxyrarbg.org/index80.php&quot;&gt;proxyrarbg&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Tracker-加速&quot;&gt;&lt;a href=&quot;#Tracker-加速&quot; class=&quot;headerlink&quot; title=&quot;Tracker 加速&quot;&gt;&lt;/a&gt;Tracker 加速&lt;/h1&gt;&lt;p&gt;每天更新：&lt;br&gt;&lt;a href=&quot;https://jsd.cdn.zzko.cn/gh/XIU2/TrackersListCollection/best.txt&quot;&gt;精选列表&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://jsd.cdn.zzko.cn/gh/XIU2/TrackersListCollection/all.txt&quot;&gt;完整列表&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://jsd.cdn.zzko.cn/gh/XIU2/TrackersListCollection/http.txt&quot;&gt;HTTP(S)列表&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="hardware" scheme="https://zoctan.github.io/categories/zh/hardware/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows Nas</title>
    <link href="https://zoctan.github.io/2022/10/10/zh/hardware/nas/windows_nas/"/>
    <id>https://zoctan.github.io/2022/10/10/zh/hardware/nas/windows_nas/</id>
    <published>2022-10-09T16:00:00.000Z</published>
    <updated>2022-10-25T14:51:29.978Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;闲置的旧笔记本装了 Windows Sever 2019 做 Nas，当一个过渡产品，看看 Nas 是否真的是自己的刚需。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Zoctan/WinNas&quot;&gt;项目仓库&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="hardware" scheme="https://zoctan.github.io/categories/zh/hardware/"/>
    
    
  </entry>
  
  <entry>
    <title>Jenkins 自动化部署</title>
    <link href="https://zoctan.github.io/2019/01/31/zh/programing/docker/jenkins_auto_deploy/"/>
    <id>https://zoctan.github.io/2019/01/31/zh/programing/docker/jenkins_auto_deploy/</id>
    <published>2019-01-30T16:00:00.000Z</published>
    <updated>2022-10-25T14:51:30.002Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Jenkins 拉取 GitLab 仓库源码&lt;/li&gt;
&lt;li&gt;Jenkins 本地构建打包应用&lt;/li&gt;
&lt;li&gt;把应用按 Dockerfile 打包进 Docker 镜像&lt;/li&gt;
&lt;li&gt;使用 shell 或 Docker 相关的 Jenkins 插件把镜像上传到 Docker 私有仓库&lt;/li&gt;
&lt;li&gt;执行 shell 脚本删除旧 Docker 容器，运行新 Docker 容器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000007837054?utm_source=tag-newest&quot;&gt;Jenkins集成Docker镜像实现自动发布&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/39289273&quot;&gt;docker+jenkins+git搭建java自动化部署&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.51cto.com/ganbing/2085769&quot;&gt;实战docker+jenkins+git+registry构建持续集成环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/8b1241a90d7a&quot;&gt;基于Docker+Jenkins+Gitlab搭建持续集成环境&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="programing" scheme="https://zoctan.github.io/categories/zh/programing/"/>
    
    <category term="docker" scheme="https://zoctan.github.io/categories/zh/programing/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>GitLab 搭建</title>
    <link href="https://zoctan.github.io/2019/01/29/zh/programing/docker/gitlab_deploy/"/>
    <id>https://zoctan.github.io/2019/01/29/zh/programing/docker/gitlab_deploy/</id>
    <published>2019-01-28T16:00:00.000Z</published>
    <updated>2022-10-25T14:51:30.002Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;有时候公司需要搭建私有仓库，这时 GitHub 就不能用了。&lt;/p&gt;
&lt;p&gt;这里的私有仓库使用 GitLab，而且使用 Docker 方式运行，方便快速。&lt;/p&gt;
&lt;p&gt;GitLab 有 CE 和 EE 版本，本文使用 CE 版本。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;https://docs.gitlab.com/omnibus/docker/README.html&quot;&gt;GitLab 官方文档&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="programing" scheme="https://zoctan.github.io/categories/zh/programing/"/>
    
    <category term="docker" scheme="https://zoctan.github.io/categories/zh/programing/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Registry 搭建</title>
    <link href="https://zoctan.github.io/2019/01/29/zh/programing/docker/registry_deploy/"/>
    <id>https://zoctan.github.io/2019/01/29/zh/programing/docker/registry_deploy/</id>
    <published>2019-01-28T16:00:00.000Z</published>
    <updated>2022-10-25T14:51:30.006Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Docker Hub 是 Docker 公司提供的公共镜像存储空间，类似 GitHub、Maven。&lt;/p&gt;
&lt;p&gt;和它们一样，公司为了节省网络带宽，防止一些安全问题，一般会搭建私有仓库。&lt;/p&gt;
&lt;p&gt;本文使用的私有仓库是 Registry。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/kevingrace/p/6628062.html&quot;&gt;Docker容器学习梳理–私有仓库Registry使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/zhaojiankai/p/7813969.html&quot;&gt;Registry私有仓库搭建及认证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="programing" scheme="https://zoctan.github.io/categories/zh/programing/"/>
    
    <category term="docker" scheme="https://zoctan.github.io/categories/zh/programing/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>短链接服务系统开发</title>
    <link href="https://zoctan.github.io/2018/10/31/zh/programing/design_ideas/short_link_service_system/"/>
    <id>https://zoctan.github.io/2018/10/31/zh/programing/design_ideas/short_link_service_system/</id>
    <published>2018-10-30T16:00:00.000Z</published>
    <updated>2022-10-25T14:51:30.002Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;功能简单描述&quot;&gt;&lt;a href=&quot;#功能简单描述&quot; class=&quot;headerlink&quot; title=&quot;功能简单描述&quot;&gt;&lt;/a&gt;功能简单描述&lt;/h1&gt;&lt;p&gt;功能很简单，实现将长网址缩短的功能，如：&lt;br&gt;&lt;a href=&quot;https://javadoop.com/post/url-shortener/a/b/c/d/e/f&quot;&gt;https://javadoop.com/post/url-shortener/a/b/c/d/e/f&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://abc.com/alsk2&quot;&gt;https://abc.com/alsk2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么要转短链？因为要控制每条短信的字数，对于公司来说，短信里面的字可都是钱呀。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么不用 t.cn，url.cn 等短链服务呢，它们生成的链接不是更短吗？&lt;br&gt;是的，它们确实能实现更短的链接，可是要收钱的，而且这里面充满了商业数据呀。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;短链服务总的来说，就做两件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将长链接变为短链接，当然是越短越好。&lt;/li&gt;
&lt;li&gt;用户点击短链接的时候，实现自动跳转到原来的长链接。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="programing" scheme="https://zoctan.github.io/categories/zh/programing/"/>
    
    <category term="design ideas" scheme="https://zoctan.github.io/categories/zh/programing/design-ideas/"/>
    
    
  </entry>
  
  <entry>
    <title>hashcode</title>
    <link href="https://zoctan.github.io/2018/10/31/zh/programing/java/hashcode/"/>
    <id>https://zoctan.github.io/2018/10/31/zh/programing/java/hashcode/</id>
    <published>2018-10-30T16:00:00.000Z</published>
    <updated>2022-10-25T14:51:30.006Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在 Java 的 Object 类中有一个方法:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;根据这个方法的声明可知，该方法返回一个 int 类型的数值，并且是本地方法，因此在 Object 类中并没有给出具体的实现。&lt;/p&gt;</summary>
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="programing" scheme="https://zoctan.github.io/categories/zh/programing/"/>
    
    <category term="java" scheme="https://zoctan.github.io/categories/zh/programing/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Sdkman 管理 JDK 版本</title>
    <link href="https://zoctan.github.io/2018/10/31/zh/programing/java/sdkman_manage_jdk_version/"/>
    <id>https://zoctan.github.io/2018/10/31/zh/programing/java/sdkman_manage_jdk_version/</id>
    <published>2018-10-30T16:00:00.000Z</published>
    <updated>2022-10-25T14:51:30.018Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;前记&quot;&gt;&lt;a href=&quot;#前记&quot; class=&quot;headerlink&quot; title=&quot;前记&quot;&gt;&lt;/a&gt;前记&lt;/h1&gt;&lt;p&gt;JDK 版本越来越多，老是手动下载改环境变量很麻烦。&lt;/p&gt;
&lt;p&gt;偶然看到 Sdkman：The Software Development Kit Manager。&lt;/p&gt;
&lt;p&gt;它可以管理各种 kit：Ant、Java、Gradle、Maven、Springboot-cli、Groovy、Kotlin、Scala。&lt;/p&gt;</summary>
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="programing" scheme="https://zoctan.github.io/categories/zh/programing/"/>
    
    <category term="java" scheme="https://zoctan.github.io/categories/zh/programing/java/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL 各种连接</title>
    <link href="https://zoctan.github.io/2018/10/31/zh/programing/basis/database/mysql/mysql_join/"/>
    <id>https://zoctan.github.io/2018/10/31/zh/programing/basis/database/mysql/mysql_join/</id>
    <published>2018-10-30T16:00:00.000Z</published>
    <updated>2022-10-25T14:51:29.994Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;p&gt;MySQL 版本：10.1.29-MariaDB-6+b1&lt;/p&gt;
&lt;p&gt;建表 SQL：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; `a_table` (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `a_id` &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `a_name` &lt;span class=&quot;type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `a_part` &lt;span class=&quot;type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) ENGINE&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;InnoDB &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;utf8;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; `b_table` (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `b_id` &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `b_name` &lt;span class=&quot;type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `b_part` &lt;span class=&quot;type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) ENGINE&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;InnoDB &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;utf8;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="programing" scheme="https://zoctan.github.io/categories/zh/programing/"/>
    
    <category term="basis" scheme="https://zoctan.github.io/categories/zh/programing/basis/"/>
    
    <category term="database" scheme="https://zoctan.github.io/categories/zh/programing/basis/database/"/>
    
    
  </entry>
  
  <entry>
    <title>3.Netty from the ground up</title>
    <link href="https://zoctan.github.io/2018/10/19/zh/programing/book_read/java/netty_in_action/3_netty_from_the_ground_up/"/>
    <id>https://zoctan.github.io/2018/10/19/zh/programing/book_read/java/netty_in_action/3_netty_from_the_ground_up/</id>
    <published>2018-10-18T16:00:00.000Z</published>
    <updated>2022-10-25T14:51:30.002Z</updated>
    
    
    <summary type="html">&lt;p&gt;Netty 组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bootstrap &amp;#x2F; ServerBootstrap&lt;/li&gt;
&lt;li&gt;EventLoop&lt;/li&gt;
&lt;li&gt;EventLoopGroup&lt;/li&gt;
&lt;li&gt;ChannelPipeline&lt;/li&gt;
&lt;li&gt;Channel&lt;/li&gt;
&lt;li&gt;Future &amp;#x2F; ChannelFuture&lt;/li&gt;
&lt;li&gt;ChannelInitializer&lt;/li&gt;
&lt;li&gt;ChannelHandler&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来将会在本章对上面组件进行介绍，为了避免分散地介绍它们，我们将详细说明它们是如何在一起工作的。&lt;/p&gt;</summary>
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="programing" scheme="https://zoctan.github.io/categories/zh/programing/"/>
    
    <category term="book read" scheme="https://zoctan.github.io/categories/zh/programing/book-read/"/>
    
    <category term="java" scheme="https://zoctan.github.io/categories/zh/programing/book-read/java/"/>
    
    
  </entry>
  
  <entry>
    <title>1.Netty and Java NIO APIs</title>
    <link href="https://zoctan.github.io/2018/10/18/zh/programing/book_read/java/netty_in_action/1_netty_and_java_nio_apis/"/>
    <id>https://zoctan.github.io/2018/10/18/zh/programing/book_read/java/netty_in_action/1_netty_and_java_nio_apis/</id>
    <published>2018-10-17T16:00:00.000Z</published>
    <updated>2022-10-25T14:51:30.002Z</updated>
    
    
    <summary type="html">&lt;p&gt;本章内容主要介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Netty 架构&lt;/li&gt;
&lt;li&gt;我们为什么需要非阻塞IO&lt;/li&gt;
&lt;li&gt;阻塞IO vs 非阻塞IO&lt;/li&gt;
&lt;li&gt;了解 JDK 的 NIO实现的问题和 Netty 的解决方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面关于 Netty 架构的省略。&lt;/p&gt;
&lt;h1 id=&quot;异步的设计&quot;&gt;&lt;a href=&quot;#异步的设计&quot; class=&quot;headerlink&quot; title=&quot;异步的设计&quot;&gt;&lt;/a&gt;异步的设计&lt;/h1&gt;&lt;p&gt;整个 Netty 的 API 都是异步的。异步处理并不新鲜，已经出现有一段时间了。在这些年里，IO 经常出现瓶颈，所以异步处理变得越来越重要。&lt;/p&gt;
&lt;p&gt;在使用资源时调用异步处理可以变得更有效率，因为当任务进行时，我们可以去干其他事，直到我们收到任务完成的信息。&lt;/p&gt;</summary>
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="programing" scheme="https://zoctan.github.io/categories/zh/programing/"/>
    
    <category term="book read" scheme="https://zoctan.github.io/categories/zh/programing/book-read/"/>
    
    <category term="java" scheme="https://zoctan.github.io/categories/zh/programing/book-read/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Netty&#39;s Hello World</title>
    <link href="https://zoctan.github.io/2018/10/11/zh/programing/book_read/java/netty_in_action/netty/"/>
    <id>https://zoctan.github.io/2018/10/11/zh/programing/book_read/java/netty_in_action/netty/</id>
    <published>2018-10-10T16:00:00.000Z</published>
    <updated>2022-10-25T14:51:30.002Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://netty.io/index.html&quot;&gt;Netty 官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以到官网下载，也可以直接使用 maven 依赖：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;io.netty&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;netty-all&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.1.30.Final&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;compile&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="programing" scheme="https://zoctan.github.io/categories/zh/programing/"/>
    
    <category term="book read" scheme="https://zoctan.github.io/categories/zh/programing/book-read/"/>
    
    <category term="java" scheme="https://zoctan.github.io/categories/zh/programing/book-read/java/"/>
    
    
  </entry>
  
  <entry>
    <title>合并请求VS并行请求</title>
    <link href="https://zoctan.github.io/2018/10/10/zh/programing/design_ideas/merge_requests_and_parallel_requests/"/>
    <id>https://zoctan.github.io/2018/10/10/zh/programing/design_ideas/merge_requests_and_parallel_requests/</id>
    <published>2018-10-09T16:00:00.000Z</published>
    <updated>2022-10-25T14:51:30.002Z</updated>
    
    
    <summary type="html">&lt;p&gt;减少HTTP请求，是雅虎前端性能优化35条军规的第1条，2006年雅虎提出了这35条军规，从那以后，就深深地影响到了一批又一批的前端开发者，即使在12年后的今天，影响力依旧不减…&lt;/p&gt;
&lt;p&gt;但是，雅虎军规中还有1条是：拆分资源以最大化利用浏览器并行下载的能力。现在问题就来了，减少HTTP请求，但网页所需的资源并不能减少（否则网页就不再是之前的网页了），所以减少HTTP请求，主要是通过合并资源来实现的，一边是建议合并资源，一边是建议拆分资源，显然是有冲突的地方，那么到底该怎么做呢？网上有些文章也讨论过这个问题，但大多是停留在想当然的理论分析上，而且忽略了TCP传输机制的影响。&lt;/p&gt;</summary>
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="programing" scheme="https://zoctan.github.io/categories/zh/programing/"/>
    
    <category term="design ideas" scheme="https://zoctan.github.io/categories/zh/programing/design-ideas/"/>
    
    
  </entry>
  
  <entry>
    <title>常用数据结构</title>
    <link href="https://zoctan.github.io/2018/07/29/zh/programing/java/common_data_structures/"/>
    <id>https://zoctan.github.io/2018/07/29/zh/programing/java/common_data_structures/</id>
    <published>2018-07-28T16:00:00.000Z</published>
    <updated>2022-10-25T14:51:30.006Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2018/07/29/zh/programing/java/common_data_structures/common_data_structures.png&quot; alt=&quot;常用数据结构&quot;</summary>
        
      
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="programing" scheme="https://zoctan.github.io/categories/zh/programing/"/>
    
    <category term="java" scheme="https://zoctan.github.io/categories/zh/programing/java/"/>
    
    
  </entry>
  
  <entry>
    <title>四种引用和使用场景</title>
    <link href="https://zoctan.github.io/2018/07/25/zh/programing/java/references_and_usage_scenarios/"/>
    <id>https://zoctan.github.io/2018/07/25/zh/programing/java/references_and_usage_scenarios/</id>
    <published>2018-07-24T16:00:00.000Z</published>
    <updated>2022-10-25T14:51:30.018Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;强引用（StrongReference）&quot;&gt;&lt;a href=&quot;#强引用（StrongReference）&quot; class=&quot;headerlink&quot; title=&quot;强引用（StrongReference）&quot;&gt;&lt;/a&gt;强引用（StrongReference）&lt;/h1&gt;&lt;p&gt;如果一个对象具有强引用，那垃圾回收器（Garbage Collection，GC）绝不会回收它。当内存空间不足，JVM 宁愿抛出 OutOfMemoryError，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足的问题。&lt;/p&gt;</summary>
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="programing" scheme="https://zoctan.github.io/categories/zh/programing/"/>
    
    <category term="java" scheme="https://zoctan.github.io/categories/zh/programing/java/"/>
    
    
  </entry>
  
  <entry>
    <title>获取 request 及其线程安全性分析</title>
    <link href="https://zoctan.github.io/2018/07/25/zh/programing/java/spring/request_and_its_thread_safety_analysis/"/>
    <id>https://zoctan.github.io/2018/07/25/zh/programing/java/spring/request_and_its_thread_safety_analysis/</id>
    <published>2018-07-24T16:00:00.000Z</published>
    <updated>2022-10-25T14:51:30.018Z</updated>
    
    
    <summary type="html">&lt;p&gt;原文&lt;a href=&quot;https://www.cnblogs.com/kismetv/p/8757260.html&quot;&gt;Spring中获取request的几种方法，及其线程安全性分析&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文将介绍在使用 Spring MVC 开发中，获取 request 对象的几种方法，并讨论其线程安全性。&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;在使用 Spring MVC 开发 Web 系统时，经常需要在处理请求时使用 request 对象。比如：获取客户端 IP 地址、请求的 URL、header 中的属性（Cookie、授权信息）、body 中的数据等。&lt;/p&gt;
&lt;p&gt;由于在 Spring MVC 中，处理请求的 Controller、Service 等对象都是单例的，因此获取 request 对象时最需要注意的问题，便是 request 对象是否线程安全：当有大量并发请求时，能否保证不同请求&amp;#x2F;线程中使用不同的 request 对象。&lt;/p&gt;</summary>
    
    
    
    <category term="zh" scheme="https://zoctan.github.io/categories/zh/"/>
    
    <category term="programing" scheme="https://zoctan.github.io/categories/zh/programing/"/>
    
    <category term="java" scheme="https://zoctan.github.io/categories/zh/programing/java/"/>
    
    
    <category term="spring" scheme="https://zoctan.github.io/tags/spring/"/>
    
  </entry>
  
</feed>
